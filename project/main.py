import logging, random, sqlite3, os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

BOT_TOKEN = "8020241872:AAFRJb_t9Fxh2lKHI2_nUqdIbHWpnmA-cNQ"

CHALLENGES = [
    {"id": 1, "title": "–ë–µ–∑ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ —Å—Ç–∞–∫–∞–Ω—á–∏–∫–∞", "desc": "–í–æ–∑—å–º–∏ –∫–æ—Ñ–µ –≤ —Å–≤–æ—é –∫—Ä—É–∂–∫—É", "co2": 0.1},
    {"id": 2, "title": "–ö–æ—Ä–æ—Ç–∫–∏–π –¥—É—à", "desc": "–°–æ–∫—Ä–∞—Ç–∏ –¥—É—à –Ω–∞ 5 –º–∏–Ω—É—Ç", "co2": 1.2},
    {"id": 3, "title": "–î–µ–Ω—å –±–µ–∑ –º—è—Å–∞", "desc": "–ü–æ–ø—Ä–æ–±—É–π –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫—É—é –µ–¥—É", "co2": 3.2},
    {"id": 4, "title": "–í—ã–∫–ª—é—á–∏ —Å–≤–µ—Ç", "desc": "–ù–µ –∑–∞–±—É–¥—å –≤—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç", "co2": 0.3}
]

MAIN_MENU = ReplyKeyboardMarkup([['üéØ –ó–∞–¥–∞–Ω–∏–µ', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'], ['üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', '‚ùì –ü–æ–º–æ—â—å']], resize_keyboard=True)
TASK_MENU = ReplyKeyboardMarkup([['‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª', '‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
if os.path.exists('ecoguide.db'):
    os.remove('ecoguide.db')

def get_db():
    conn = sqlite3.connect('ecoguide.db')
    conn.execute('''CREATE TABLE IF NOT EXISTS users 
                   (user_id INTEGER PRIMARY KEY, username TEXT, co2_saved REAL DEFAULT 0)''')
    conn.execute('''CREATE TABLE IF NOT EXISTS completed 
                   (user_id INTEGER, challenge_id INTEGER)''')
    return conn

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = get_db()
    conn.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user.id, user.username))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç {user.first_name}! üå±\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –¥–µ–ª–∞—Ç—å –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞ –¥–ª—è –ø–ª–∞–Ω–µ—Ç—ã!",
        reply_markup=MAIN_MENU
    )

async def get_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = get_db()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    cursor = conn.cursor()
    cursor.execute("SELECT challenge_id FROM completed WHERE user_id = ?", (user_id,))
    completed = [row[0] for row in cursor.fetchall()]
    
    # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    available = [t for t in CHALLENGES if t['id'] not in completed]
    task = random.choice(available) if available else random.choice(CHALLENGES)
    
    context.user_data['current_task'] = task
    conn.close()
    
    text = f"üéØ {task['title']}\n\n{task['desc']}\n\nüíö –°—ç–∫–æ–Ω–æ–º–∏—Ç: {task['co2']} –∫–≥ CO‚ÇÇ"
    await update.message.reply_text(text, reply_markup=TASK_MENU)

async def complete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    task = context.user_data.get('current_task')
    
    if not task:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏ –∑–∞–¥–∞–Ω–∏–µ! üéØ", reply_markup=MAIN_MENU)
        return
    
    conn = get_db()
    
    # –î–æ–±–∞–≤–ª—è–µ–º CO2
    conn.execute("UPDATE users SET co2_saved = co2_saved + ? WHERE user_id = ?", (task['co2'], user.id))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    conn.execute("INSERT INTO completed (user_id, challenge_id) VALUES (?, ?)", (user.id, task['id']))
    
    conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    cursor = conn.cursor()
    cursor.execute("SELECT co2_saved FROM users WHERE user_id = ?", (user.id,))
    co2_saved = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM completed WHERE user_id = ?", (user.id,))
    completed_count = cursor.fetchone()[0]
    
    level = int(co2_saved / 5) + 1
    conn.close()
    
    text = f"""üéâ –ú–æ–ª–æ–¥–µ—Ü!

‚úÖ {task['title']}
üíö +{task['co2']} –∫–≥ CO‚ÇÇ

üìä –í—Å–µ–≥–æ: {co2_saved:.1f} –∫–≥
üìà –£—Ä–æ–≤–µ–Ω—å: {level}
‚úÖ –ó–∞–¥–∞–Ω–∏–π: {completed_count}"""
    
    await update.message.reply_text(text, reply_markup=MAIN_MENU)

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = get_db()
    
    cursor = conn.cursor()
    cursor.execute("SELECT co2_saved FROM users WHERE user_id = ?", (user.id,))
    result = cursor.fetchone()
    
    if not result:
        await update.message.reply_text("–ù–∞—á–Ω–∏ —Å /start")
        conn.close()
        return
    
    co2_saved = result[0]
    cursor.execute("SELECT COUNT(*) FROM completed WHERE user_id = ?", (user.id,))
    completed_count = cursor.fetchone()[0]
    
    level = int(co2_saved / 5) + 1
    conn.close()
    
    text = f"""üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üèÜ –£—Ä–æ–≤–µ–Ω—å: {level}
üíö CO‚ÇÇ: {co2_saved:.1f} –∫–≥
‚úÖ –ó–∞–¥–∞–Ω–∏–π: {completed_count}"""
    
    await update.message.reply_text(text, reply_markup=MAIN_MENU)

async def show_achievements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = get_db()
    
    cursor = conn.cursor()
    cursor.execute("SELECT co2_saved FROM users WHERE user_id = ?", (user.id,))
    result = cursor.fetchone()
    
    if not result:
        await update.message.reply_text("–ù–∞—á–Ω–∏ —Å /start")
        conn.close()
        return
    
    co2_saved = result[0]
    cursor.execute("SELECT COUNT(*) FROM completed WHERE user_id = ?", (user.id,))
    completed_count = cursor.fetchone()[0]
    conn.close()
    
    achievements = []
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞–Ω–∏–π
    if completed_count >= 1:
        achievements.append("üéñ –ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
    if completed_count >= 3:
        achievements.append("üèÖ –û–ø—ã—Ç–Ω—ã–π —ç–∫–æ–ª–æ–≥ (3+ –∑–∞–¥–∞–Ω–∏–π)")
    if completed_count >= 5:
        achievements.append("‚≠ê –ú–∞—Å—Ç–µ—Ä —ç–∫–æ–ª–æ–≥–∏–∏ (5+ –∑–∞–¥–∞–Ω–∏–π)")
    
    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω–æ–º—É CO2
    if co2_saved >= 5:
        achievements.append("üåç –°–ø–∞—Å–∞—Ç–µ–ª—å –ø–ª–∞–Ω–µ—Ç—ã (5+ –∫–≥ CO‚ÇÇ)")
    if co2_saved >= 10:
        achievements.append("üöÄ –≠–∫–æ–ì–µ—Ä–æ–π (10+ –∫–≥ CO‚ÇÇ)")
    
    if achievements:
        text = "üèÜ –¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n" + "\n".join(f"‚Ä¢ {ach}" for ach in achievements)
    else:
        text = "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π üò¢\n\n–í—ã–ø–æ–ª–Ω–∏ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ! üéñ"
    
    await update.message.reply_text(text, reply_markup=MAIN_MENU)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = """ü§ñ EcoGuide Bot

üéØ –ó–∞–¥–∞–Ω–∏–µ - –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å  
üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è - —Ç–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã
‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª - –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
‚Ü©Ô∏è –ù–∞–∑–∞–¥ - –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

/start - –Ω–∞—á–∞—Ç—å
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ø–æ–º–æ—â—å"""
    await update.message.reply_text(text, reply_markup=MAIN_MENU)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == 'üéØ –ó–∞–¥–∞–Ω–∏–µ': 
        await get_task(update, context)
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': 
        await show_stats(update, context)
    elif text == 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è': 
        await show_achievements(update, context)
    elif text == '‚ùì –ü–æ–º–æ—â—å': 
        await help_cmd(update, context)
    elif text == '‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª': 
        await complete_task(update, context)
    elif text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥': 
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=MAIN_MENU)
    else: 
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é üëÜ", reply_markup=MAIN_MENU)

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", show_stats))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üå±")
    app.run_polling()

if __name__ == '__main__':
    main()